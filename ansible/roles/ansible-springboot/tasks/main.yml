---

- name: Install required software for deployed application
  apt:
    name: "{{item}}"
    update_cache: yes
    state: present
  with_items:
    - git
    - maven
    - ffmpeg

- name: Ensure springboot user exists
  user:
    name: "{{ springboot_user }}"
    state: present

# create a directory if it doesn't exist
- file:
    path: /var/log/{{ springboot_application_name }}
    state: directory
    mode: 0755
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"

- file:
    path: /video
    state: directory
    mode: 0755
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"

- file:
    path: /repositories
    state: directory
    mode: 0755
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"

- name: "Check for required inventory springboot_application_name variable"
  fail:
    msg: springboot_application_name variable is required and should be defined in you inventory
  when: not springboot_application_name or springboot_application_name == ''

- name: "Check for required inventory springboot_src_file or springboot_src_url variable"
  fail:
    msg: springboot_src variable or springboot_src_url is required and should be defined in you inventory
  when: (not springboot_src_file or springboot_src_file == '') and (not springboot_src_url or springboot_src_url == '')

- name: os-specific vars
  include_vars: "{{ansible_os_family}}.yml"

- name: "Create group for springboot app"
  group:
    name: "{{ springboot_group }}"
    state: present

- name: "Create user for springboot app"
  user:
    name: "{{ springboot_user }}"
    group: "{{ springboot_group }}"
    state: present

- name: "Create deploy folder if not exists"
  file:
    path: "{{ springboot_deploy_folder }}"
    state: directory
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"

- name: "Copy jar application"
  copy:
    src: "{{ springboot_src_file }}"
    dest: "{{ springboot_deploy_folder }}/{{ springboot_application_name }}.jar"
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"
    mode: "u+x"
  when: springboot_src_file is defined and springboot_src_file|length > 0
  notify:
    - "Restart application"

- name: "Download springboot application"
  get_url:
    url: "{{ springboot_src_url }}"
    dest: "{{ springboot_deploy_folder }}/{{ springboot_application_name }}.jar"
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"
    mode: "u+x"
  when: springboot_src_url is defined and springboot_src_url|length > 0
  notify:
    - "Restart application"

- name: "Deploy app properties"
  template:
    src: "{{ springboot_propertyfile_template }}"
    dest: "{{ springboot_deploy_folder }}"
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"
  when: springboot_propertyfile_template and springboot_propertyfile_template != ''
  notify:
    - "Restart application"

- name: "Deploy app config"
  template:
    src: "{{ springboot_configuration_template }}"
    dest: "{{ springboot_deploy_folder }}"
    owner: "{{ springboot_user }}"
    group: "{{ springboot_group }}"
  when: springboot_configuration_template and springboot_configuration_template != ''
  notify:
    - "Restart application"

- name: Install as service
  include: service.yml

- name: start thumbtack-xonix-mind
  service:
    name: thumbtack-xonix-mind
    state: started
